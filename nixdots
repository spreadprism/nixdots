#! /bin/sh

set -e # exit on error

FLAKE_ROOT=$HOME/nixdots

# INFO: Variables
# PLATFORM : linux, darwin
# DISTRO : nixos, arch, etc

function main
{
  parse_args "$@"
  case $CMD in
    switch) switch;;
    init) init;;
    search) search;;
    clean) clean;;
    *) usage;;
  esac
}

function switch
{
  pushd $FLAKE_ROOT
  if [ "$UPATE_LOCKFILE" = true ]; then
    nix flake update
  fi
  case "$PLATFORM-$DISTRO-$NH_AVAILABLE" in
    linux-nixos-true)
      nh os switch .
      ;;
    linux-nixos-false)
      sudo nixos-rebuild switch --flake .
      ;;
    linux-*-true)
      nh home switch .
      ;;
    linux-*-false)
      if [ $(command -v home-manager)]; then
        home-manager switch --flake .
      else
        nix run home-manager switch -- --flake .
      fi
      ;;
    darwin-*)
      if [ $(command -v nix-darwin) ]; then
        darwin-rebuild switch --flake .
      else
        nix run nix-darwin#darwin-rebuild -- switch --flake .
      fi
      ;;
    *)
      echo "unsupported platform"
      exit 1
      ;;
  esac
  popd
}

function search
{
  if [ "$NH_AVAILABLE" = true ]; then
    nh search "${ARGS[1]}" | bat --pager="less -RF +G"
  else
    # TODO: implement
    echo "not implemented"
  fi
}

function clean
{
  # TODO: implement
  return
}

function init
{
  # TODO: implement
  ensure_nix_available
  echo "init"
}

function ensure_nix_available
{
  if [ "$NIX_AVAILABLE" ]; then
    return
  fi
  if [ "$PLATFORM" = "linux" ]; then
    if [ "$USE_DAEMON" ]; then
      curl -L https://nixos.org/nix/install | sh -- --daemon
    else
      curl -L https://nixos.org/nix/install | sh -- --no-daemon
    fi
  else
    curl -L https://nixos.org/nix/install | sh
  fi
}

function usage
{
  # TODO: Add help msg
  return
}

ARGS=()
function parse_args
{
  # positional args
  ARGS=()
  # named args
  while [ "$1" != "" ]; do
    case "$1" in
      --daemon)
        USE_DAEMON=true
        ;;
      --no-daemon)
        USE_DAEMON=false
        ;;
      -u | --update)
        UPATE_LOCKFILE=true
        ;;
      -h | --help )
        usage;
        exit
        ;;
      *)
        ARGS+=("$1")
    esac
    shift # move to next kv pair
  done

  # restore positional args
  set -- "${ARGS[@]}"

  # positional args
  CMD="${ARGS[0]}"

  # set default
  if [[ -z "$CMD" ]]; then
    CMD=switch;
  fi
  if [[ -z "$USE_DAEMON" ]]; then
    USE_DAEMON=true;
  fi
  if [[ -z "$UPATE_LOCKFILE" ]]; then
    UPATE_LOCKFILE=false;
  fi
}

case "$OSTYPE" in
  linux*)
    PLATFORM=linux
    DISTRO=$(cat /etc/os-release | grep ^ID | awk -F= '{print $2}')
    ;;
  darwin*)
    PLATFORM=darwin
    ;;
  *)
    echo "unsuported: $OSTYPE"
    exit 1
    ;;
esac

NIX_AVAILABLE=$(command -v nix)
if [ $(command -v nh) ]; then
  NH_AVAILABLE="true"
else
  NH_AVAILABLE="false"
fi

main "$@";
